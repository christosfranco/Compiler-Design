Hello - from /home/christos/.vscode/extensions/jaredly.reason-vscode-1.7.12/bin.native.linux
Previous log location: /tmp/lsp.log
Sending notification {"jsonrpc": "2.0", "method": "client/registerCapability", "params": {"registrations": [{"id": "watching", "method": "workspace/didChangeWatchedFiles", "registerOptions": {"watchers": [{"globPattern": "**/bsconfig.json"}, {"globPattern": "**/.merlin"}]}}]}}
Sending response {"id": 0, "jsonrpc": "2.0", "result": {"capabilities": {"textDocumentSync": 1, "hoverProvider": true, "completionProvider": {"resolveProvider": true, "triggerCharacters": ["."]}, "signatureHelpProvider": {"triggerCharacters": ["("]}, "definitionProvider": true, "typeDefinitionProvider": true, "referencesProvider": true, "documentSymbolProvider": true, "codeActionProvider": true, "executeCommandProvider": {"commands": ["reason-language-server.add_to_interface_inner"]}, "codeLensProvider": {"resolveProvider": true}, "documentHighlightProvider": true, "documentRangeFormattingProvider": true, "documentFormattingProvider": true, "renameProvider": true}}}
Read message 
{"jsonrpc":"2.0","method":"initialized","params":{}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"reason_language_server":{"location":"","build_system_override_by_root":{},"refmt":"","lispRefmt":"","mlfmt":"","format_width":100,"per_value_codelens":false,"dependencies_codelens":true,"opens_codelens":true,"show_module_path_on_hover":true,"reloadOnChange":false,"show_debug_errors":false,"autoRebuild":true}}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/christos/CD/hw2/Compiler-Design/hw2/x86/x86.ml","languageId":"ocaml","version":1,"text":"(* X86lite language representation. *)\n\n(* assembler syntax --------------------------------------------------------- *)\n\n(* Labels for code blocks and global data. *)\ntype lbl = string\n\ntype quad = int64\n\n(* Immediate operands *)\ntype imm = Lit of quad\n         | Lbl of lbl\n\n(* Registers:\n    instruction pointer: rip\n    arguments: rdi, rsi, rdx, rcx, r09, r08\n    callee-save: rbx, rbp, r12-r15 \n*)\ntype reg = Rip\n         | Rax | Rbx | Rcx | Rdx | Rsi | Rdi | Rbp | Rsp\n         | R08 | R09 | R10 | R11 | R12 | R13 | R14 | R15\n\ntype operand = Imm of imm            (* immediate *)\n             | Reg of reg            (* register *)\n             | Ind1 of imm           (* indirect: displacement *)\n             | Ind2 of reg           (* indirect: (%reg) *)\n             | Ind3 of (imm * reg)   (* indirect: displacement(%reg) *)\n\n(* Condition Codes *)\ntype cnd = Eq | Neq | Gt | Ge | Lt | Le\n\ntype opcode = Movq | Pushq | Popq\n            | Leaq\n            | Incq | Decq | Negq | Notq\n            | Addq | Subq | Imulq | Xorq | Orq | Andq\n            | Shlq | Sarq | Shrq\n            | Jmp | J of cnd\n            | Cmpq  | Set of cnd\n            | Callq | Retq\n\n(* An instruction is an opcode plus its operands.\n   Note that arity and other constraints about the operands \n   are not checked. *)\ntype ins = opcode * operand list              \n\ntype data = Asciz of string\n          | Quad of imm\n\ntype asm = Text of ins list    (* code *)\n         | Data of data list   (* data *)\n\n(* labeled blocks of data or code *)\ntype elem = { lbl: lbl; global: bool; asm: asm }\n\ntype prog = elem list\n\n(* Provide some syntactic sugar for writing x86 code in OCaml files. *)\nmodule Asm = struct\n  let (~$) i = Imm (Lit (Int64.of_int i))      (* int64 constants *)\n  let (~$$) l = Imm (Lbl l)                    (* label constants *)\n  let (~%) r = Reg r                           (* registers *)\n\n  (* helper functions for building blocks of data or code *)\n  let data l ds = { lbl = l; global = true; asm = Data ds }\n  let text l is = { lbl = l; global = false; asm = Text is }\n  let gtext l is = { lbl = l; global = true; asm = Text is }\nend\n\n(* pretty printing ----------------------------------------------------------- *)\n\nlet string_of_reg : reg -> string = function\n  | Rip -> \"%rip\"\n  | Rax -> \"%rax\" | Rbx -> \"%rbx\" | Rcx -> \"%rcx\" | Rdx -> \"%rdx\"\n  | Rsi -> \"%rsi\" | Rdi -> \"%rdi\" | Rbp -> \"%rbp\" | Rsp -> \"%rsp\"\n  | R08 -> \"%r8 \" | R09 -> \"%r9 \" | R10 -> \"%r10\" | R11 -> \"%r11\"\n  | R12 -> \"%r12\" | R13 -> \"%r13\" | R14 -> \"%r14\" | R15 -> \"%r15\"\n\nlet string_of_byte_reg : reg -> string = function\n  | Rip -> failwith \"%rip used as byte register\"\n  | Rax -> \"%al\"   | Rbx -> \"%bl\"   | Rcx -> \"%cl\"   | Rdx -> \"%dl\"\n  | Rsi -> \"%sil\"  | Rdi -> \"%dil\"  | Rbp -> \"%bpl\"  | Rsp -> \"%spl\"\n  | R08 -> \"%r8b\"  | R09 -> \"%r9b\"  | R10 -> \"%r10b\" | R11 -> \"%r11b\"\n  | R12 -> \"%r12b\" | R13 -> \"%r13b\" | R14 -> \"%r14b\" | R15 -> \"%r15b\"\n\nlet string_of_lbl (l:lbl) : string = l\n\nlet string_of_imm : imm -> string = function\n  | Lit i -> Int64.to_string i\n  | Lbl l -> string_of_lbl l\n\nlet string_of_operand : operand -> string = function\n  | Imm i -> \"$\" ^ string_of_imm i\n  | Reg r -> string_of_reg r\n  | Ind1 i -> string_of_imm i\n  | Ind2 r -> \"(\" ^ string_of_reg r ^ \")\"\n  | Ind3 (i, r) -> string_of_imm i ^ \"(\" ^ string_of_reg r ^ \")\"\n\nlet string_of_byte_operand : operand -> string = function\n  | Imm i -> \"$\" ^ string_of_imm i\n  | Reg r -> string_of_byte_reg r\n  | Ind1 i -> string_of_imm i\n  | Ind2 r -> \"(\" ^ string_of_reg r ^ \")\"\n  | Ind3 (i, r) -> string_of_imm i ^ \"(\" ^ string_of_reg r ^ \")\"\n\nlet string_of_jmp_operand : operand -> string = function\n  | Imm i -> string_of_imm i\n  | Reg r -> \"*\" ^ string_of_reg r\n  | Ind1 i -> \"*\" ^ string_of_imm i\n  | Ind2 r -> \"*\" ^ \"(\" ^ string_of_reg r ^ \")\"\n  | Ind3 (i, r) -> \"*\" ^ string_of_imm i ^ \"(\" ^ string_of_reg r ^ \")\"\n\nlet string_of_cnd : cnd -> string = function\n  | Eq -> \"e\"  | Neq -> \"ne\" | Gt -> \"g\"\n  | Ge -> \"ge\" | Lt -> \"l\"   | Le -> \"le\"\n\nlet string_of_opcode : opcode -> string = function\n  | Movq -> \"movq\" | Pushq -> \"pushq\" | Popq -> \"popq\"\n  | Leaq -> \"leaq\"\n  | Incq -> \"incq\" | Decq -> \"decq\" | Negq -> \"negq\" | Notq -> \"notq\"\n  | Addq -> \"addq\" | Subq -> \"subq\" | Imulq -> \"imulq\"\n  | Xorq -> \"xorq\" | Orq -> \"orq\"  | Andq -> \"andq\"\n  | Shlq -> \"shlq\" | Sarq -> \"sarq\" | Shrq -> \"shrq\"\n  | Jmp  -> \"jmp\"  | J c -> \"j\" ^ string_of_cnd c \n  | Cmpq -> \"cmpq\" | Set c -> \"set\" ^ string_of_cnd c\n  | Callq -> \"callq\" | Retq -> \"retq\"\n\nlet map_concat s f l = String.concat s @@ List.map f l\n\nlet string_of_shift op = function\n  | [ Imm i ; dst ] as args ->\n    \"\\t\" ^ string_of_opcode op ^ \"\\t\" ^ map_concat \", \" string_of_operand args\n  | [ Reg Rcx ; dst ] ->\n    Printf.sprintf \"\\t%s\\t%%cl, %s\" (string_of_opcode op) (string_of_operand dst)\n  | args -> failwith (Printf.sprintf \"shift instruction has invalid operands: %s\\n\" \n                     (map_concat \", \" string_of_operand args))\n                   \nlet string_of_ins (op, args: ins) : string =\n  match op with\n  | Shlq | Sarq | Shrq -> string_of_shift op args\n  | _ ->\n  let f = match op with\n    | J _ | Jmp | Callq -> string_of_jmp_operand \n    | Set _ -> string_of_byte_operand\n    | _ -> string_of_operand \n  in\n  \"\\t\" ^ string_of_opcode op ^ \"\\t\" ^ map_concat \", \" f args\n\nlet string_of_data : data -> string = function\n  | Asciz s -> \"\\t.asciz\\t\" ^ \"\\\"\" ^ (String.escaped s) ^ \"\\\"\"\n  | Quad i -> \"\\t.quad\\t\" ^ string_of_imm i\n\nlet string_of_asm : asm -> string = function\n  | Text is -> \"\\t.text\\n\" ^ map_concat \"\\n\" string_of_ins is\n  | Data ds -> \"\\t.data\\n\" ^ map_concat \"\\n\" string_of_data ds\n\nlet string_of_elem {lbl; global; asm} : string =\n  let sec, body = match asm with\n    | Text is -> \"\\t.text\\n\", map_concat \"\\n\" string_of_ins is\n    | Data ds -> \"\\t.data\\n\", map_concat \"\\n\" string_of_data ds\n  in\n  let glb = if global then \"\\t.globl\\t\" ^ string_of_lbl lbl ^ \"\\n\" else \"\" in\n  sec ^ glb ^ string_of_lbl lbl ^ \":\\n\" ^ body\n\nlet string_of_prog (p:prog) : string =\n  String.concat \"\\n\" @@ List.map string_of_elem p\n"}}}
Found a `.merlin` file at /home/christos/CD/hw2
]] Making a new jbuilder package at /home/christos/CD/hw2
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":1,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/christos/CD/hw2/Compiler-Design/hw2/x86/x86.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0109672546387ms
Found a `.merlin` file at /home/christos/CD/hw2
]] Making a new jbuilder package at /home/christos/CD/hw2
Sending response {"id": 1, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":2,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/christos/CD/hw2/Compiler-Design/hw2/x86/x86.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/christos/CD/hw2
]] Making a new jbuilder package at /home/christos/CD/hw2
Sending response {"id": 2, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":3,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/christos/CD/hw2/Compiler-Design/hw2/x86/x86.ml"},"position":{"line":14,"character":17}}}
[server] Got a method textDocument/hover
[server] processing took 0.0119209289551ms
Found a `.merlin` file at /home/christos/CD/hw2
]] Making a new jbuilder package at /home/christos/CD/hw2
Sending response {"id": 3, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":4,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/christos/CD/hw2/Compiler-Design/hw2/x86/x86.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Found a `.merlin` file at /home/christos/CD/hw2
]] Making a new jbuilder package at /home/christos/CD/hw2
Sending response {"id": 4, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to find project root dir", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":5,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/christos/CD/hw2/Compiler-Design/hw2/x86/x86.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0109672546387ms
Found a `.merlin` file at /home/christos/CD/hw2
]] Making a new jbuilder package at /home/christos/CD/hw2
Sending response {"id": 5, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to find project root dir", "command": ""}}]}
Found a `.merlin` file at /home/christos/CD/hw2
]] Making a new jbuilder package at /home/christos/CD/hw2
Read message 
{"jsonrpc":"2.0","id":6,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/christos/CD/hw2/Compiler-Design/hw2/x86/x86.ml"},"position":{"line":25,"character":19}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/christos/CD/hw2
]] Making a new jbuilder package at /home/christos/CD/hw2
Sending response {"id": 6, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":7,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/christos/CD/hw2/Compiler-Design/hw2/x86/x86.ml"},"range":{"start":{"line":4,"character":10},"end":{"line":4,"character":11}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/christos/CD/hw2
]] Making a new jbuilder package at /home/christos/CD/hw2
Sending response {"id": 7, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":8,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/christos/CD/hw2/Compiler-Design/hw2/x86/x86.ml"},"range":{"start":{"line":4,"character":10},"end":{"line":4,"character":12}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0178813934326ms
Found a `.merlin` file at /home/christos/CD/hw2
]] Making a new jbuilder package at /home/christos/CD/hw2
Sending response {"id": 8, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":9,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/christos/CD/hw2/Compiler-Design/hw2/x86/x86.ml"},"range":{"start":{"line":4,"character":10},"end":{"line":4,"character":11}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0171661376953ms
Found a `.merlin` file at /home/christos/CD/hw2
]] Making a new jbuilder package at /home/christos/CD/hw2
Sending response {"id": 9, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":10,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/christos/CD/hw2/Compiler-Design/hw2/x86/x86.ml"},"range":{"start":{"line":45,"character":16},"end":{"line":45,"character":17}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0300407409668ms
Found a `.merlin` file at /home/christos/CD/hw2
]] Making a new jbuilder package at /home/christos/CD/hw2
Sending response {"id": 10, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":11,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/christos/CD/hw2/Compiler-Design/hw2/x86/x86.ml"},"position":{"line":19,"character":55}}}
[server] Got a method textDocument/hover
[server] processing took 0.0238418579102ms
Found a `.merlin` file at /home/christos/CD/hw2
]] Making a new jbuilder package at /home/christos/CD/hw2
Sending response {"id": 11, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":12,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/christos/CD/hw2/Compiler-Design/hw2/x86/x86.ml"},"position":{"line":58,"character":65}}}
[server] Got a method textDocument/hover
[server] processing took 0.0300407409668ms
Found a `.merlin` file at /home/christos/CD/hw2
]] Making a new jbuilder package at /home/christos/CD/hw2
Sending response {"id": 12, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":13,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/christos/CD/hw2/Compiler-Design/hw2/x86/x86.ml"},"position":{"line":43,"character":35}}}
[server] Got a method textDocument/hover
[server] processing took 0.0298023223877ms
Found a `.merlin` file at /home/christos/CD/hw2
]] Making a new jbuilder package at /home/christos/CD/hw2
Sending response {"id": 13, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":14,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/christos/CD/hw2/Compiler-Design/hw2/x86/x86.ml"},"position":{"line":63,"character":45}}}
[server] Got a method textDocument/hover
[server] processing took 0.0240802764893ms
Found a `.merlin` file at /home/christos/CD/hw2
]] Making a new jbuilder package at /home/christos/CD/hw2
Sending response {"id": 14, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":15,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/christos/CD/hw2/Compiler-Design/hw2/x86/x86.ml"},"position":{"line":63,"character":19}}}
[server] Got a method textDocument/hover
[server] processing took 0.00715255737305ms
Found a `.merlin` file at /home/christos/CD/hw2
]] Making a new jbuilder package at /home/christos/CD/hw2
Sending response {"id": 15, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":16,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/christos/CD/hw2/Compiler-Design/hw2/x86/x86.ml"},"position":{"line":62,"character":19}}}
[server] Got a method textDocument/hover
[server] processing took 0.0259876251221ms
Found a `.merlin` file at /home/christos/CD/hw2
]] Making a new jbuilder package at /home/christos/CD/hw2
Sending response {"id": 16, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":17,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/christos/CD/hw2/Compiler-Design/hw2/x86/x86.ml"},"position":{"line":62,"character":19}}}
[server] Got a method textDocument/hover
[server] processing took 0.0138282775879ms
Found a `.merlin` file at /home/christos/CD/hw2
]] Making a new jbuilder package at /home/christos/CD/hw2
Sending response {"id": 17, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":18,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/christos/CD/hw2/Compiler-Design/hw2/x86/x86.ml"},"position":{"line":65,"character":53}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/christos/CD/hw2
]] Making a new jbuilder package at /home/christos/CD/hw2
Sending response {"id": 18, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/christos/CD/test/x86Lite-simulator/gradedtests.ml","languageId":"ocaml","version":1,"text":"open Assert\nopen Simulator\nopen X86\nopen Asm\n\n(* Test suite for asm.ml *)\n\n(* Do NOT modify this file -- we will overwrite it with our *)\n(* own version when we test your project.                   *)\n\n(* These tests will be used to grade your assignment *)\n\n(* Example Programs *)\n\nlet helloworld = [ text \"foo\"\n                            [ Xorq, [~%Rax; ~%Rax]\n                            ; Movq, [~$100; ~%Rax]\n                            ; Retq, []\n                            ]\n                     ; text \"main\" \n                            [ Xorq, [~%Rax; ~%Rax]\n                            ; Movq, [Ind1 (Lbl \"baz\"); ~%Rax]\n                            ; Retq, []\n                            ]\n                     ; data \"baz\" \n                            [ Quad (Lit 99L)\n                            ; Asciz \"Hello, world!\"\n                            ]\n                     ]\n\nlet factorial_iter n = [ text \"main\"\n                                  [ Movq,  [~$1; ~%Rax]\n                                  ; Movq,  [~$n; ~%Rdi]\n                                  ]\n                           ; text \"loop\"\n                                  [ Cmpq,  [~$0; ~%Rdi]\n                                  ; J Eq,  [~$$\"exit\"]\n                                  ; Imulq, [~%Rdi; ~%Rax]\n                                  ; Decq,  [~%Rdi]\n                                  ; Jmp,   [~$$\"loop\"]\n                                  ]\n                           ; text \"exit\"\n                                  [ Retq,  [] \n                                  ]\n                           ]\n\nlet factorial_rec n = [ text \"fac\"\n                                 [ Subq,  [~$8; ~%Rsp]\n                                 ; Cmpq,  [~$1; ~%Rdi]\n                                 ; J Le,  [~$$\"exit\"]\n                                 ; Movq,  [~%Rdi; Ind2 Rsp]\n                                 ; Decq,  [~%Rdi]\n                                 ; Callq, [~$$\"fac\"]\n                                 ; Imulq, [Ind2 Rsp; ~%Rax]\n                                 ; Addq,  [~$8; ~%Rsp]\n                                 ; Retq,  []\n                                 ]\n                          ; text \"exit\"\n                                 [ Movq,  [~$1; ~%Rax]\n                                 ; Addq,  [~$8; ~%Rsp]\n                                 ; Retq,  [] \n                                 ]\n                          ; gtext \"main\"\n                                 [ Movq,  [~$n; ~%Rdi]\n                                 ; Callq, [~$$\"fac\"]\n                                 ; Retq,  []\n                                 ]\n                      ]\n\n(* Object Builders *)\n\nlet sbyte_list (a: sbyte array) (start: int) : sbyte list =\n  Array.to_list (Array.sub a start 8)\n\nlet stack_offset (i: quad) : operand = Ind3 (Lit i, Rsp)\n\nlet test_exec: exec =\n  { entry = 0x400008L\n  ; text_pos = 0x400000L\n  ; data_pos = 0x400064L\n  ; text_seg = [] \n  ; data_seg = []\n  }\n\nlet test_machine (bs: sbyte list): mach =\n  let mem = (Array.make mem_size (Byte '\\x00')) in\n  Array.blit (Array.of_list bs) 0 mem 0 (List.length bs);\n  let regs = Array.make nregs 0L in\n  regs.(rind Rip) <- mem_bot;\n  regs.(rind Rsp) <- Int64.sub mem_top 8L;\n  { flags = {fo = false; fs = false; fz = false};\n    regs = regs;\n    mem = mem\n  }\n\nlet helloworld_dataseg =\n  [ Byte 'c'; Byte '\\x00'; Byte '\\x00'; Byte '\\x00'\n  ; Byte '\\x00'; Byte '\\x00'; Byte '\\x00'; Byte '\\x00'\n  ; Byte 'H'; Byte 'e' ; Byte 'l'; Byte 'l'\n  ; Byte 'o'; Byte ','; Byte ' '; Byte 'w'\n  ; Byte 'o'; Byte 'r'; Byte 'l'; Byte 'd'\n  ; Byte '!'; Byte '\\x00' ]\n\nlet helloworld_textseg =\n  [ InsB0 (Xorq, [Reg Rax; Reg Rax]); InsFrag; InsFrag; InsFrag\n  ; InsB0 (Movq, [Imm (Lit 100L); Reg Rax]); InsFrag; InsFrag; InsFrag\n  ; InsB0 (Retq, []); InsFrag; InsFrag; InsFrag\n  ; InsB0 (Xorq, [Reg Rax; Reg Rax]); InsFrag; InsFrag; InsFrag\n  ; InsB0 (Movq, [Ind1 (Lit 0x400018L); Reg Rax]); InsFrag; InsFrag; InsFrag\n  ; InsB0 (Retq, []); InsFrag; InsFrag; InsFrag\n  ]\n\n(* Testing Functions *)\n\nlet interp_cnd_test (fo, fs, fz) tru () =\n  let flags = {fo = fo; fs = fs; fz = fz} in\n  let all = [Eq;Neq;Gt;Ge;Lt;Le] in\n  let fls = List.filter (fun c -> not (List.mem c tru)) all in\n  let fn = interp_cnd flags in\n  let tru' = List.filter fn all in\n  let fls' = List.filter (fun c -> not (List.mem c tru')) all in\n  List.iter (fun c ->\n    if not (List.mem c tru)\n    then failwith (Printf.sprintf \"o:%b s:%b f:%b %s expected\"\n      fo fs fz (string_of_cnd c))\n    else ()\n  ) tru';\n  List.iter (fun c ->\n    if not (List.mem c fls)\n    then failwith (Printf.sprintf \"o:%b s:%b f:%b %s !expected\"\n      fo fs fz (string_of_cnd c))\n    else ()\n  ) fls'\n\nlet cc_test (s:string) (n: int) (m: mach) (fo', fs', fz') (f: mach -> bool) () =\n  let m' = {m with flags = {fo=fo';fs=fs';fz=fz'}} in\n  for i=1 to n do step m' done;\n  if (f m') then () else failwith s\n\nlet cs_test (n:int) (m:mach) (fo',fs',fz') =\n  cc_test (Printf.sprintf \"expected OF:%b SF:%b ZF:%b\" fo' fs' fz')\n    n m (not fo',not fs',not fz')\n    (fun m -> m.flags.fo = fo' && m.flags.fs = fs' && m.flags.fz = fz')\n    \nlet cso_test (n: int) (m:mach) (fo':bool) =\n  cc_test (Printf.sprintf \"expected OF:%b\" fo') n m (not fo',false,false)\n    (fun m -> m.flags.fo = fo')\n\nlet csi_test (n: int) (m:mach) =\n  cc_test \"expected TTT ccodes\" n m (true,true,true)\n    (fun m -> m.flags.fo && m.flags.fs && m.flags.fz)\n\nlet segfault_test addr () =\n  match map_addr addr with \n    | Some i -> failwith \"Should have raised X86_segmentation_fault\"\n    | None -> ()\n\nlet undefinedsym_test (p:prog) () =\n  try ignore (assemble p);\n    failwith \"Should have raised Undefined_sym\"\n  with \n    | Undefined_sym _ -> ()\n    | _ -> failwith \"Should have raised Undefined_sym\"\n\nlet machine_test (s:string) (n: int) (m: mach) (f:mach -> bool) () =\n  for i=1 to n do step m done;\n  if (f m) then () else failwith (\"expected \" ^ s)\n\nlet program_test (p:prog) (ans:int64) () =\n  let res = assemble p |> load |> run in\n  if res <> ans\n  then failwith (Printf.sprintf(\"Expected %Ld but got %Ld\") ans res)\n  else ()\n\n(* Tests *)\n\nlet map_addr_tests = [\n    (\"map_addr1\", assert_eqf (fun () -> (map_addr 0x40FFF8L)) (Some 65528));\n    (\"map_addr2\", assert_eqf (fun () -> (map_addr 0x4000FFL)) (Some 255));\n    (\"map_addr3\", assert_eqf (fun () -> (map_addr 0x400000L)) (Some 0));\n    (\"map_addr4\", segfault_test 0x0000000000000000L);\n    (\"map_addr5\", segfault_test 0xFFFFFFFFFFFFFFFDL);\n]\n\nlet interp_cnd_tests = [\n    (\"ccs_fff\", interp_cnd_test (false,false,false) [Neq;Gt;Ge] );\n    (\"ccs_fft\", interp_cnd_test (false,false,true)  [Eq;Le;Ge]  );\n    (\"ccs_ftf\", interp_cnd_test (false,true,false)  [Neq;Le;Lt] );\n    (\"ccs_ftt\", interp_cnd_test (false,true,true)   [Eq;Le;Lt]  );\n    (\"ccs_tff\", interp_cnd_test (true,false,false)  [Neq;Le;Lt] );\n    (\"ccs_tft\", interp_cnd_test (true,false,true)   [Eq;Le;Lt]  );\n    (\"ccs_ttf\", interp_cnd_test (true,true,false)   [Neq;Gt;Ge] );\n    (\"ccs_ttt\", interp_cnd_test (true,true,true)    [Eq;Le;Ge]  );\n]\n\nlet mov_ri = test_machine\n  [InsB0 (Movq, [~$42; ~%Rax]);InsFrag;InsFrag;InsFrag]\n\n\nlet add = test_machine\n  [InsB0 (Addq, [~$1; ~%Rax]);InsFrag;InsFrag;InsFrag\n  ;InsB0 (Addq, [~%Rax; ~%Rbx]);InsFrag;InsFrag;InsFrag\n  ;InsB0 (Addq, [~%Rbx; stack_offset 0L]);InsFrag;InsFrag;InsFrag\n  ]\n\n\n\nlet functionality_tests = [\n  (\"mov_ri\", machine_test \"rax=42\" 1 mov_ri\n    (fun m -> m.regs.(rind Rax) = 42L)\n  );\n\n  (\"add\", machine_test \"rax=rbx=*66528=1\" 3 add\n    (fun m -> m.regs.(rind Rax) = 1L\n           && m.regs.(rind Rbx) = 1L\n           && int64_of_sbytes (sbyte_list m.mem (mem_size-8)) = 1L\n    )\n  );\n\n]\n\nlet mov_mr = test_machine\n  [InsB0 (Movq, [~$42; ~%Rax]);InsFrag;InsFrag;InsFrag\n  ;InsB0 (Movq, [~%Rax; stack_offset (-8L)]);InsFrag;InsFrag;InsFrag]\n\n\nlet subq = test_machine\n    [InsB0 (Subq, [~$1; ~%Rax]);InsFrag;InsFrag;InsFrag\n    ;InsB0 (Subq, [~%Rax; ~%Rbx]);InsFrag;InsFrag;InsFrag\n    ;InsB0 (Subq, [~%Rbx; stack_offset 0L]);InsFrag;InsFrag;InsFrag]\n\nlet andq = test_machine\n    [InsB0 (Movq, [~$2; ~%Rax]);InsFrag;InsFrag;InsFrag\n    ;InsB0 (Movq, [~$3; ~%Rbx]);InsFrag;InsFrag;InsFrag\n    ;InsB0 (Movq, [~$255; ~%Rcx]);InsFrag;InsFrag;InsFrag\n    ;InsB0 (Movq, [~$1; stack_offset 0L]);InsFrag;InsFrag;InsFrag\n    ;InsB0 (Andq, [~%Rax; ~%Rax]);InsFrag;InsFrag;InsFrag\n    ;InsB0 (Andq, [~$2; ~%Rax]);InsFrag;InsFrag;InsFrag\n    ;InsB0 (Andq, [~%Rax; ~%Rbx]);InsFrag;InsFrag;InsFrag\n    ;InsB0 (Andq, [stack_offset 0L; ~%Rcx]);InsFrag;InsFrag;InsFrag\n    ]\n\n\nlet negq = test_machine\n    [InsB0 (Movq, [~$42; ~%Rax]);InsFrag;InsFrag;InsFrag\n    ;InsB0 (Movq, [~$(-24); stack_offset 0L]);InsFrag;InsFrag;InsFrag\n    ;InsB0 (Movq, [Imm (Lit Int64.min_int); ~%Rbx]);InsFrag;InsFrag;InsFrag\n    ;InsB0 (Negq, [~%Rax]);InsFrag;InsFrag;InsFrag\n    ;InsB0 (Negq, [stack_offset 0L]);InsFrag;InsFrag;InsFrag\n    ;InsB0 (Negq, [~%Rbx]);InsFrag;InsFrag;InsFrag\n    ]\n\n\nlet shl = test_machine\n    [InsB0 (Movq, [~$1; ~%Rax]);InsFrag;InsFrag;InsFrag\n    ;InsB0 (Movq, [~$2; stack_offset 0L]);InsFrag;InsFrag;InsFrag\n    ;InsB0 (Movq, [~$3; ~%Rcx]);InsFrag;InsFrag;InsFrag\n    ;InsB0 (Shlq, [~$2; ~%Rax]);InsFrag;InsFrag;InsFrag\n    ;InsB0 (Shlq, [~%Rcx; stack_offset 0L]);InsFrag;InsFrag;InsFrag\n    ]\n\n\nlet imul = test_machine\n    [InsB0 (Movq, [~$2; ~%Rax]);InsFrag;InsFrag;InsFrag\n    ;InsB0 (Movq, [~$22; ~%Rbx]);InsFrag;InsFrag;InsFrag\n    ;InsB0 (Imulq, [~%Rbx; ~%Rax]);InsFrag;InsFrag;InsFrag\n    ]\n\nlet pushq = test_machine\n    [InsB0 (Pushq, [~$42]);InsFrag;InsFrag;InsFrag]\n\nlet popq = test_machine\n    [InsB0 (Addq, [~$(-8); ~%Rsp]);InsFrag;InsFrag;InsFrag\n    ;InsB0 (Movq, [~$42; stack_offset 0L]);InsFrag;InsFrag;InsFrag\n    ;InsB0 (Popq, [~%Rax]);InsFrag;InsFrag;InsFrag\n    ]\n\nlet cmpq = test_machine\n    [InsB0 (Movq, [~$4; ~%Rax]);InsFrag;InsFrag;InsFrag\n    ;InsB0 (Movq, [~$2; stack_offset 0L]);InsFrag;InsFrag;InsFrag\n    ;InsB0 (Cmpq, [~$1; ~%Rax]);InsFrag;InsFrag;InsFrag\n    ;InsB0 (Cmpq, [~%Rax; ~%Rbx]);InsFrag;InsFrag;InsFrag\n    ;InsB0 (Cmpq, [~%Rbx; stack_offset 0L]);InsFrag;InsFrag;InsFrag\n    ]\n\nlet instruction_tests = [\n  (\"mov_mr\", machine_test \"*65520=42\" 2 mov_mr\n    (fun m -> int64_of_sbytes (sbyte_list m.mem (mem_size-16)) = 42L)\n  );\n \n  (\"subq\", machine_test \"rax=*65528=-1L; rbx=1\" 3 subq\n    (fun m -> m.regs.(rind Rax) = (Int64.neg 1L)\n           && m.regs.(rind Rbx) = 1L\n           && int64_of_sbytes (sbyte_list m.mem (mem_size-8)) = (Int64.neg 1L)\n    )\n  );\n  (\"andq\", machine_test \"rax=2 rbx=2 rcx=1 *65528=1\" 8 andq\n    (fun m -> m.regs.(rind Rax) = 2L\n           && m.regs.(rind Rbx) = 2L\n           && m.regs.(rind Rcx) = 1L\n           && int64_of_sbytes (sbyte_list m.mem (mem_size-8)) = 1L\n    )\n  );\n\n  (\"negq\", machine_test \"rax=-42 rbx=min_int64 *65528=24\" 6 negq\n    (fun m -> m.regs.(rind Rax) = Int64.neg 42L\n           && m.regs.(rind Rbx) = Int64.min_int\n           && int64_of_sbytes (sbyte_list m.mem (mem_size-8)) = 24L\n    )\n  );\n\n  (\"shl\", machine_test \"rax=4 *65528=16\" 5 shl\n    (fun m -> m.regs.(rind Rax) = 4L\n           && int64_of_sbytes (sbyte_list m.mem (mem_size-8)) = 16L\n    )\n  );\n\n  (\"imul\", machine_test \"rax=44 *65528=2\" 3 imul\n    (fun m -> m.regs.(rind Rax) = 44L)\n  );\n  (\"pushq\", machine_test \"rsp=4 *65520=2A\" 1 pushq\n    (fun m -> m.regs.(rind Rsp) = 0x0040FFF0L\n           && int64_of_sbytes (sbyte_list m.mem (mem_size-16)) = 0x2AL\n    )\n  );\n  (\"popq\", machine_test \"rsp=4259832 rax=2A\" 3 popq\n    (fun m -> m.regs.(rind Rax) = 0x2AL\n           && m.regs.(rind Rsp) = 0x0040FFF8L\n    )\n  );\n  (\"cmpq\", machine_test \"rax=4 rbx=0\" 5 cmpq\n    (fun m -> m.regs.(rind Rax) = 4L\n           && m.regs.(rind Rbx) = 0L\n           && int64_of_sbytes (sbyte_list m.mem (mem_size-8)) = 2L\n    )\n  );\n]\n\nlet cc_add_1 = test_machine\n  [InsB0 (Movq, [Imm (Lit 0xFFFFFFFFFFFFFFFFL); ~%Rax]);InsFrag;InsFrag;InsFrag\n  ;InsB0 (Addq, [~$1; ~%Rax]);InsFrag;InsFrag;InsFrag\n  ]\n\nlet cc_add_2 = test_machine\n  [InsB0 (Movq, [Imm (Lit 0xFFFFFFFFFFFFFFFFL); ~%Rax]);InsFrag;InsFrag;InsFrag\n  ;InsB0 (Addq, [Imm (Lit 0xFFFFFFFFFFFFFFFFL); ~%Rax]);InsFrag;InsFrag;InsFrag\n  ]\n\nlet cc_add_3 = test_machine\n  [InsB0 (Movq, [Imm (Lit 0x7FFFFFFFFFFFFFFFL); ~%Rax]);InsFrag;InsFrag;InsFrag\n  ;InsB0 (Addq, [~$42; ~%Rax]);InsFrag;InsFrag;InsFrag\n  ]\n\nlet cc_add_4 = test_machine\n  [InsB0 (Movq, [Imm (Lit 0x9000000000000000L); ~%Rax]);InsFrag;InsFrag;InsFrag\n  ;InsB0 (Addq, [Imm (Lit 0xA000000000000000L); ~%Rax]);InsFrag;InsFrag;InsFrag\n\n  ]\n\nlet cc_neg_1 = test_machine\n  [InsB0 (Movq, [Imm (Lit Int64.min_int); ~%Rbx]);InsFrag;InsFrag;InsFrag\n  ;InsB0 (Negq, [~%Rbx]);InsFrag;InsFrag;InsFrag\n  ]\n\nlet cc_neg_2 = test_machine\n  [InsB0 (Movq, [~$1; ~%Rax]);InsFrag;InsFrag;InsFrag\n  ;InsB0 (Negq, [~%Rax]);InsFrag;InsFrag;InsFrag\n  ]\n\n\nlet cc_cmp_1 = test_machine\n  [InsB0 (Movq, [~$0; ~%Rax]);InsFrag;InsFrag;InsFrag\n  ;InsB0 (Cmpq, [Imm (Lit 0x8000000000000000L); ~%Rax]);InsFrag;InsFrag;InsFrag\n  ]\n\nlet cc_cmp_2 = test_machine\n  [InsB0 (Movq, [Imm (Lit 0x8000000000000000L); ~%Rax]);InsFrag;InsFrag;InsFrag\n  ;InsB0 (Cmpq, [~$0; ~%Rax]);InsFrag;InsFrag;InsFrag\n  ]\n\n\nlet cc_imul_1 = test_machine\n  [InsB0 (Movq, [~$(-1); ~%Rax]);InsFrag;InsFrag;InsFrag\n  ;InsB0 (Imulq, [~$(-1); ~%Rax]);InsFrag;InsFrag;InsFrag\n  ]\n\n\nlet cc_and = test_machine\n  [InsB0 (Movq, [Imm (Lit 0x0F0F0F0FL); ~%Rax]);InsFrag;InsFrag;InsFrag\n  ;InsB0 (Andq, [Imm (Lit 0xF0F0F0F0L); ~%Rax]);InsFrag;InsFrag;InsFrag\n  ]\n\nlet cc_or = test_machine\n  [InsB0 (Movq, [~$0xFFFFFFF; ~%Rax]);InsFrag;InsFrag;InsFrag\n  ;InsB0 (Orq, [~$0xF0F0F0F0; ~%Rax]);InsFrag;InsFrag;InsFrag\n  ]\n\n\nlet cc_set = test_machine\n  [InsB0 (Set Neq, [~%Rax]);InsFrag;InsFrag;InsFrag]\n\nlet cc_push = test_machine\n  [InsB0 (Pushq, [~$0]);InsFrag;InsFrag;InsFrag]\n\nlet cc_pop = test_machine\n  [InsB0 (Popq, [~%Rax]);InsFrag;InsFrag;InsFrag]\n\nlet cc_ret = test_machine\n  [InsB0 (Retq, []);InsFrag;InsFrag;InsFrag]\n\nlet cc_mov = test_machine\n  [InsB0 (Movq, [~$0; ~%Rax]);InsFrag;InsFrag;InsFrag]\n\nlet cc_jmp = test_machine\n  [InsB0 (Jmp, [~$0x400008]);InsFrag;InsFrag;InsFrag]\n\nlet cc_js = test_machine\n  [InsB0 (J Neq, [~$0x400008]);InsFrag;InsFrag;InsFrag]\n\nlet cc_jf = test_machine\n  [InsB0 (J Eq, [~$0x400008]);InsFrag;InsFrag;InsFrag]\n\nlet cc_call = test_machine\n  [InsB0 (Callq, [~$0x400008]);InsFrag;InsFrag;InsFrag]\n\nlet cc_lea = test_machine\n  [InsB0 (Movq, [~$0x400600; ~%Rax]);InsFrag;InsFrag;InsFrag\n  ;InsB0 (Movq, [~$0x408000; ~%Rcx]);InsFrag;InsFrag;InsFrag\n  ;InsB0 (Leaq, [Ind2 Rax; Ind2 Rcx]);InsFrag;InsFrag;InsFrag]\n\nlet condition_flag_set_tests =\n  [ (\"cc_add_1\", cs_test 2 cc_add_1 (false, false, true))\n  ; (\"cc_add_2\", cs_test 2 cc_add_2 (false, true, false))\n  ; (\"cc_add_3\", cs_test 2 cc_add_3 (true, true, false))\n  ; (\"cc_add_4\", cs_test 2 cc_add_4 (true, false, false))\n  ; (\"cc_neg_1\", cs_test 2 cc_neg_1 (true, true, false))\n  ; (\"cc_neg_2\", cs_test 2 cc_neg_2 (false, true, false))\n\n  ; (\"cc_cmp_1\", cs_test 2 cc_cmp_1 (true, true, false))\n  ; (\"cc_cmp_2\", cs_test 2 cc_cmp_2 (false, true, false))\n\n  ; (\"cc_imul_1\", cso_test 2 cc_imul_1 false)\n\n  ; (\"cc_and\", cs_test 2 cc_and (false, false, true))\n  ; (\"cc_or\", cs_test 2 cc_or (false, false, false))\n\n  ; (\"cc_push\", csi_test 1 cc_push)\n  ; (\"cc_pop\", csi_test 1 cc_pop)\n  ; (\"cc_set\", csi_test 1 cc_set)\n  ; (\"cc_ret\", csi_test 1 cc_ret)\n  ; (\"cc_mov\", csi_test 1 cc_mov)\n  ; (\"cc_jmp\", csi_test 1 cc_jmp)\n  ; (\"cc_jmp\", csi_test 1 cc_js)\n  ; (\"cc_jmp\", csi_test 1 cc_jf)\n  ; (\"cc_call\", csi_test 1 cc_call)\n  ; (\"cc_lea\", csi_test 3 cc_lea)\n  ]\n\n(* Test Suites *)\n\nlet easy_tests : suite =\n[\n  GradedTest(\"Map Addresses\", 5, map_addr_tests);\n  GradedTest(\"Condition Codes\", 5, interp_cnd_tests);\n  GradedTest(\"Easy Assemble Tests\", 5,[\n    (\"assemble1\", assert_eqf (fun () -> (assemble helloworld).text_pos) 0x400000L );\n    (\"assemble2\", assert_eqf (fun () -> (assemble helloworld).data_pos) 0x400018L );\n  ]);\n  GradedTest(\"Easy Load Tests\", 5,[\n    (\"load_flags\", assert_eqf (fun () -> (load test_exec).flags)\n                              {fo = false; fs = false; fz = false});\n    (\"load_rip\", assert_eqf (fun () -> (load test_exec).regs.(rind Rip))\n                             0x400008L);\n    (\"load_rsp\", assert_eqf (fun () -> (load test_exec).regs.(rind Rsp))\n                             0x40FFF8L);\n  ]);\n]\n\nlet medium_tests : suite = [\n  GradedTest(\"Medium Assemble Tests\", 5,[\n    (\"assemble1\", assert_eqf (fun () -> (assemble helloworld).text_seg) helloworld_textseg );\n    (\"assemble2\", undefinedsym_test [text \"foo\" [Retq,[]]]);\n    \n  ]);\n  GradedTest(\"Medium Load Tests\", 5,[\n    (\"load_exit_addr\", assert_eqf (fun () ->\n          let m = load test_exec in\n          int64_of_sbytes (sbyte_list m.mem 0x0fff8)\n    ) exit_addr);\n  ]);\n  GradedTest(\"Functionality Tests\", 5, functionality_tests);\n  GradedTest(\"Instruction Tests\", 10, instruction_tests);\n  GradedTest(\"Condition Flag Set Tests\", 5, condition_flag_set_tests);\n]\n\nlet other_team_tests =\n  GradedTest(\"OtherTeamTests (manual)\", 10,\n    [])\n\nlet hard_tests : suite = [\n  GradedTest (\"Factorial\", 10, [\n    (\"fact6\", program_test (factorial_rec 6) 720L);\n  ]);\n  GradedTest (\"Hard\", 10, []);\n] @ [other_team_tests]\n\nlet manual_tests : suite = [\n  GradedTest (\"PartIIITestCase (manual)\", 15, [\n  \n  ]);\n  GradedTest (\"Style (manual)\", 5, [\n  \n  ]);\n]\n\nlet graded_tests : suite = \n  (*hard_tests*)\n  \n  easy_tests @\n  medium_tests @\n  manual_tests @\n\thard_tests\n  \n \n"}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":19,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/christos/CD/test/x86Lite-simulator/gradedtests.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 19, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":20,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/christos/CD/test/x86Lite-simulator/gradedtests.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0109672546387ms
Sending response {"id": 20, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":21,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/christos/CD/test/x86Lite-simulator/gradedtests.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0298023223877ms
Sending response {"id": 21, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":22,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/christos/CD/test/x86Lite-simulator/gradedtests.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0109672546387ms
Sending response {"id": 22, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":23,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/christos/CD/test/x86Lite-simulator/gradedtests.ml"},"position":{"line":10,"character":25}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Sending response {"id": 23, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":24,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/christos/CD/test/x86Lite-simulator/gradedtests.ml"},"range":{"start":{"line":10,"character":25},"end":{"line":10,"character":25}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0159740447998ms
Sending response {"id": 24, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":25,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/christos/CD/test/x86Lite-simulator/gradedtests.ml"},"position":{"line":24,"character":9}}}
[server] Got a method textDocument/hover
[server] processing took 0.0278949737549ms
Sending response {"id": 25, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":26,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/christos/CD/test/x86Lite-simulator/gradedtests.ml"},"position":{"line":57,"character":28}}}
[server] Got a method textDocument/hover
[server] processing took 0.0171661376953ms
Sending response {"id": 26, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":27,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/christos/CD/test/x86Lite-simulator/gradedtests.ml"},"position":{"line":71,"character":10}}}
[server] Got a method textDocument/hover
[server] processing took 0.0290870666504ms
Sending response {"id": 27, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
